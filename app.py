import telebot
import random
import requests
import json
# import sqlite3
import psycopg2
import urllib.parse
import telebot
from telebot import types
import os
from flask import Flask, request
# from flask import Flask, request

random_word = 'kjnl'
groups = []
games_for_admin = []
days_list = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
master_schedule_buttons = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°–∏—Å—Ç–µ–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', '–î–µ–Ω—å',
                           '–í—Ä–µ–º—è', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
                           '–ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã', '–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
master_short_schedule_buttons = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã', '–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É',
                                 '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
titles_for_players = ['–ú–∞—Å—Ç–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü–æ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∏–≥—Ä–∞', '–û–ø–∏—Å–∞–Ω–∏–µ',
                      '–ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–≥—Ä–∞', '–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞', '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞',
                      '–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ', '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è',
                      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ó–∞–ø–∏—Å–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–£—á–∞—Å—Ç–Ω–∏–∫–∏', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ']
titles_for_masters = ['–ú–∞—Å—Ç–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü–æ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∏–≥—Ä–∞', '–û–ø–∏—Å–∞–Ω–∏–µ',
                      '–ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–≥—Ä–∞', '–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞', '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞',
                      '–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ', '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è',
                      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ó–∞–ø–∏—Å–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ']

app = Flask(__name__)
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

DATABASE_URL = os.getenv("DATABASE_URL")

WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://worker-production-4757.up.railway.app{WEBHOOK_PATH}"


@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200


# player_functions
def add_player(name, data):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'INSERT INTO players (player, game, master) VALUES (%s, %s, %s)',
        (name, data, data))
    conn.commit()
    cursor.close()
    conn.close()


def delete_in_schedule(player, game, text):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        text, (game,))
    players = cursor.fetchall()
    cursor.close()
    conn.close()

    if len(players) != 0:
        players_dict = {}
        for names in players:
            id_game = names[0]
            names = names[1].split()
            players_dict[id_game] = names

        for key in players_dict:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                f'SELECT schedule.signed_players FROM schedule WHERE id ={int(key)}')
            result = cursor.fetchall()
            signed_players = int(result[0][0])
            cursor.close()
            conn.close()

            count, new_text = 0, ''
            data = players_dict[key]
            data_copy = data.copy()
            for elem in data:
                if '@' + player + ',' == elem:
                    data_copy.remove(elem)
                    count += 1
                elif '@' + player == elem:
                    data_copy.remove(elem)
                    count += 1
            if len(data_copy) == 0:
                new_text += '-'
                players_dict[key] = new_text
            else:
                for data in data_copy:
                    name = ''
                    for symbol in data:
                        if symbol != ',' and symbol != ' ':
                            name += symbol
                    new_text += name + ',' + ' '
                if new_text[-1] == ' ':
                    new_text = new_text[:-1]
                if new_text[-1] == ',':
                    new_text = new_text[:-1]

            if signed_players - count == 0:
                signed_players = '-'
            else:
                signed_players = signed_players - count

            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE schedule SET players=%s, signed_players=%s WHERE id=%s ',
                (new_text, signed_players, int(key)))
            conn.commit()
            cursor.close()
            conn.close()


def delete_player(username):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM players WHERE player=%s ', (username,))
    conn.commit()
    cursor.close()
    conn.close()
    delete_in_schedule(username, '-', 'SELECT schedule.id, schedule.players FROM schedule WHERE '
                                      'players !=%s')


def main_menu_player(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
    markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'),
               types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã'),
               types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—ã'),
               types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞'))
    return markup


def copy_game_for_player(name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM schedule WHERE title=%s', (name, ))
    masters_id = cursor.fetchall()
    cursor.close()
    conn.close()

    master_id = [elem[-1] for elem in masters_id][0]

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT master, title, system, description, address, day, time, before_game, count_players, duration, '
        f'cost, additionally, photo, signed_players, players, master_id, master_name, master_last_name  FROM schedule '
        f'WHERE id = {int(master_id)}')
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'INSERT INTO schedule (master, title, system, description, address, day, time, '
        f'before_game, count_players, duration, cost, additionally, photo, signed_players, players, master_id, '
        f'master_name, master_last_name) VALUES {result[0]}')
    conn.commit()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'DELETE FROM schedule WHERE id = {int(master_id)}')
    conn.commit()
    cursor.close()
    conn.close()


def get_data_for_player(name, argument):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    if argument == 'show_games_one_master':
        cursor.execute(
            'SELECT schedule.title FROM schedule WHERE master=%s', (name,))
        answer = cursor.fetchall()
        cursor.close()
        conn.close()
        result = [elem[0] for elem in answer]
        return result

    elif argument == 'show_games':
        cursor.execute(
            'SELECT schedule.title, schedule.master_name, schedule.master_last_name FROM schedule '
            'WHERE master=%s', (name, ))
        games = cursor.fetchall()
        cursor.close()
        conn.close()

        new_result = []
        for game in games:
            name_game = game[0]
            master = f'{game[1]} {game[2]}'
            text = f'üî• "{name_game}" üî•, –º–∞—Å—Ç–µ—Ä - {master}'
            new_result.append(text)
        return new_result

    elif argument == 'show_masters':
        cursor.execute(
            'SELECT schedule.master FROM schedule')
        masters = cursor.fetchall()
        cursor.close()
        conn.close()

        if len(masters) == 0:
            result = '–ú–∞—Å—Ç–µ—Ä–∞ –µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüòî\n–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ üëÄ'
        else:
            result = [master[0] for master in masters]
            result = list(set(result))
        return result

    elif argument == 'show_concrete_game':
        cursor.execute(
            f'SELECT schedule.photo FROM schedule WHERE title=%s', (name,))
        photo = cursor.fetchall()[0][0]
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            f'SELECT schedule.master, schedule.title, schedule.system, schedule.description, schedule.duration, '
            f'schedule.address, schedule.day, schedule.time, schedule.before_game, schedule.cost, '
            f'schedule.count_players, schedule.signed_players, schedule.additionally FROM schedule WHERE title=%s',
            (name,))
        last_game = cursor.fetchall()[0]
        cursor.close()
        conn.close()

        answer = {}
        for i in range(len(last_game)):
            if last_game[i] != '-':
                answer[titles_for_masters[i]] = last_game[i]
        len_answer = len(answer)
        count = 0

        text = ''
        for word in answer:
            count += 1
            if word == '–ú–∞—Å—Ç–µ—Ä':
                text += f'*{word}*\n@{answer.get(word)}\n‚Äî\n'
            else:
                if count == len_answer:
                    text += f'*{word}*\n{answer.get(word)}'
                if count != len_answer:
                    text += f'*{word}*\n{answer.get(word)}\n‚Äî\n'

        result = []
        if photo != '-':
            result.append(photo)
            result.append(text)
            return result
        else:
            return text
    elif argument == 'show_last_game_for_player':
        cursor.execute(
            'SELECT schedule.id FROM schedule')
        result = cursor.fetchall()
        cursor.close()
        conn.close()

        masters_id = [elem[0] for elem in result]
        masters_id.sort()
        master_id = masters_id[-1]

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            f'SELECT schedule.photo FROM schedule WHERE id=%s', (int(master_id),))
        photo = cursor.fetchall()[0][0]
        cursor.close()
        conn.close()

        answer = []
        if photo != '-':
            answer.append(photo)
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                f'SELECT schedule.master, schedule.title, schedule.system, schedule.description, schedule.duration, '
                f'schedule.address, schedule.day, schedule.time, schedule.before_game, schedule.cost, '
                f'schedule.count_players, schedule.signed_players, schedule.players, schedule.additionally '
                f'FROM schedule WHERE id=%s',
                (int(master_id),))
            result = cursor.fetchall()[0]
            cursor.close()
            conn.close()

            finally_answer = {}
            for i in range(len(result)):
                if result[i] != '-':
                    finally_answer[titles_for_players[i]] = result[i]
            answer.append(finally_answer)
            return answer

        else:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                f'SELECT schedule.master, schedule.title, schedule.system, schedule.description, schedule.duration, '
                f'schedule.address, schedule.day, schedule.time, schedule.before_game, schedule.cost, '
                f'schedule.count_players, schedule.signed_players, schedule.players, schedule.additionally '
                f'FROM schedule WHERE id=%s',
                (int(master_id),))
            result = cursor.fetchall()[0]
            cursor.close()
            conn.close()

            finally_answer = {}
            for i in range(len(result)):
                if result[i] != '-':
                    finally_answer[titles_for_players[i]] = result[i]
            return finally_answer

    elif argument == 'show_games_one_player':
        cursor.execute(
            'SELECT players.game FROM players WHERE player=%s', (name,))
        answer = cursor.fetchall()
        result = [elem[0] for elem in answer]
        cursor.close()
        conn.close()

        if len(result) == 0:
            return '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É :)'
        else:
            return result


def unsubscribe(player):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.id FROM schedule')
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    masters_id = [elem[0] for elem in result]
    masters_id.sort()
    master_id = masters_id[-1]

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT schedule.title FROM schedule WHERE id=%s', (int(master_id),))
    game = cursor.fetchall()[0][0]
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM players WHERE game=%s ', (game,))
    conn.commit()
    cursor.close()
    conn.close()

    delete_in_schedule(player, game, 'SELECT schedule.id, schedule.players FROM schedule WHERE title =%s')


def checking_players_for_replay(text, username):
    list_names = []
    name = ''
    for i in range(len(text)):
        if text[i] != ',' and text[i] != ' ':
            name += text[i]
        if i == len(text) - 1:
            list_names.append(name)
        elif text[i] == ',':
            list_names.append(name)
            name = ''

    username = '@' + username
    if username in list_names:
        return '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É :)'


def notify_master(player, game):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    data = {}
    cursor.execute(
        'SELECT schedule.master_id FROM schedule WHERE title=%s', (game,))
    master = cursor.fetchall()[0][0]
    cursor.close()
    conn.close()

    data['master'] = master
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.master_name FROM schedule WHERE title=%s', (game,))
    master_name = cursor.fetchall()[0][0]
    cursor.close()
    conn.close()

    text = f'–ü—Ä–∏–≤–µ—Ç, {master_name}!\n–ù–∞ –≤–∞—à—É –∏–≥—Ä—É << {game} >> –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: @{player} :)'
    data['text'] = text
    return data


def check_free_places(username, game):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.signed_players FROM schedule WHERE title=%s', (game,))
    signed_players = cursor.fetchall()
    cursor.close()
    conn.close()

    signed_players = signed_players[0][0]
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.count_players FROM schedule WHERE title=%s', (game,))
    count_players = cursor.fetchall()[0][0]
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.master FROM schedule WHERE title=%s', (game,))
    master = cursor.fetchall()[0][0]
    cursor.close()
    conn.close()

    if signed_players == '-':
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE schedule SET signed_players=%s WHERE title=%s', (1, game,))
        conn.commit()
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE schedule SET players=%s WHERE title=%s',
            ('@' + username, game,))
        conn.commit()
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
        conn.commit()
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
        conn.commit()
        cursor.close()
        conn.close()
        return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
    else:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT schedule.players FROM schedule WHERE title=%s', (game,))
        players = cursor.fetchall()[0][0]
        cursor.close()
        conn.close()

        if checking_players_for_replay(players, username) == '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É :)':
            return '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É :)'

        elif count_players == '-':
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE schedule SET signed_players=%s WHERE title=%s',
                (int(signed_players) + 1, game,))
            conn.commit()
            cursor.close()
            conn.close()

            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE schedule SET players=%s WHERE title=%s',
                (players + ', ' + '@' + username, game,))
            conn.commit()
            cursor.close()
            conn.close()

            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
            conn.commit()
            cursor.close()
            conn.close()

            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
            conn.commit()
            cursor.close()
            conn.close()
            return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
        elif len(count_players) == 1 or len(count_players) == 2:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            if int(count_players) == int(signed_players):
                cursor.close()
                conn.close()
                return 0
            elif int(signed_players) < int(count_players):
                cursor.execute(
                    'UPDATE schedule SET signed_players=%s WHERE title=%s',
                    (int(signed_players) + 1, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE schedule SET players=%s WHERE title=%s',
                    (players + ', ' + '@' + username, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
                conn.commit()
                cursor.close()
                conn.close()
                return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
        elif len(count_players) == 3:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            if int(signed_players) < int(count_players[-1]):
                cursor.execute(
                    'UPDATE schedule SET signed_players=%s WHERE title=%s',
                    (int(signed_players) + 1, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE schedule SET players=%s WHERE title=%s',
                    (players + ', ' + '@' + username, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
                conn.commit()
                cursor.close()
                conn.close()
                return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
            else:
                cursor.close()
                conn.close()
                return 0
        elif len(count_players) == 4:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            if int(signed_players) < int(count_players[2:]):
                cursor.execute(
                    'UPDATE schedule SET signed_players=%s WHERE title=%s',
                    (int(signed_players) + 1, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE schedule SET players=%s WHERE title=%s',
                    (players + ', ' + '@' + username, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
                conn.commit()
                cursor.close()
                conn.close()
                return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
            else:
                cursor.close()
                conn.close()
                return 0
        elif len(count_players) == 5:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            if int(signed_players) < int(count_players[3:]):
                cursor.execute(
                    'UPDATE schedule SET signed_players=%s WHERE title=%s',
                    (int(signed_players) + 1, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE schedule SET players=%s WHERE title=%s',
                    (players + ', ' + '@' + username, game,))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET game=%s WHERE game=%s AND player=%s', (game, 'default', username))
                conn.commit()
                cursor.close()
                conn.close()

                conn = psycopg2.connect(DATABASE_URL)
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE players SET master=%s WHERE game=%s AND player=%s', (master, game, username))
                conn.commit()
                cursor.close()
                conn.close()
                return '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É'
            else:
                cursor.close()
                conn.close()
                return 0


def check_games_player(player):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM players WHERE player=%s', (player, ))
    games = cursor.fetchall()
    cursor.close()
    conn.close()

    id_games = []
    for game in games:
        schedule = [elem for elem in game if elem != '-']

        if len(schedule) == 2:
            id_games.append(schedule[-1])

    if len(id_games):
        for id_game in id_games:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM players WHERE id=%s ', (int(id_game),))
            conn.commit()
            cursor.close()
            conn.close()


def btn_back_to_main_menu_player(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    return markup


def back_to_main_menu_player(message):
    result = main_menu_player(message)
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=result)


# master_functions
bot_info = bot.get_me()


def get_admins():
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT administrators.name FROM administrators')
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    admins = [admin[0] for admin in result]
    return admins


def add_chats_to_database(link):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    name = bot.get_chat('@' + link[13:]).title
    id_chat = bot.get_chat('@' + link[13:]).id
    cursor.execute(
        f'INSERT INTO chats_with_games (link, name, id_chat) VALUES ("{link}", "{name}", "{id_chat}")')
    conn.commit()
    cursor.close()
    conn.close()


def get_chats(argument, chat):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    if argument == 'get_name':
        cursor.execute(
                'SELECT chats_with_games.name FROM chats_with_games')
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        chats = [link[0] for link in result]
        return chats
    elif argument == 'get_link':
        cursor.execute(
            'SELECT chats_with_games.link FROM chats_with_games WHERE name=%s', (chat, ))
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        link = [link[0] for link in result]
        return link[0]
    elif argument == 'get_id':
        cursor.execute(
            'SELECT chats_with_games.id_chat FROM chats_with_games WHERE name=%s', (chat, ))
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        id_chat = [link[0] for link in result]
        return id_chat[0]


def check_replay_links(data):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT chats_with_games.link FROM chats_with_games')
    links = cursor.fetchall()
    cursor.close()
    conn.close()

    links = [link[0] for link in links]
    if data in links:
        return True
    else:
        return False


def check_bot_group_membership(token, id_group):
    chat_member = bot.get_chat_member(chat_id=id_group, user_id=bot_info.id)
    if chat_member.status in ["member", "administrator", "creator"]:
        return True  # –ë–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
    else:
        return False  # –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ


def check_count_players(data):
    new_dict = {}
    for i in range(len(data)):
        if data[i].isdigit():
            new_dict[i] = data[i]
    if len(new_dict) >= 5 or len(new_dict) == 0:
        return [0, data]
    else:
        if len(new_dict) == 1:
            count = [new_dict.get(key) for key in new_dict][0]
            return [1, count]
        elif len(new_dict) == 2:
            count = [key for key in new_dict]
            if int(count[0]) + 1 == int(count[1]):
                return [1, new_dict[count[0]] + new_dict[count[1]]]
            else:
                return [1, new_dict[count[0]] + '-' + new_dict[count[1]]]
        elif len(new_dict) == 3:
            count = [key for key in new_dict]
            if int(count[0]) + 1 == int(count[1]):
                return [0, data]
            else:
                first_digit = new_dict[count[0]]
                if int(count[1]) + 1 != int(count[2]):
                    return [0, data]
                elif int(count[1]) + 1 == int(count[2]):
                    second_digit = new_dict[count[1]] + new_dict[count[2]]
                    return [1, first_digit + '-' + second_digit]
        elif len(new_dict) == 4:
            count = [key for key in new_dict]
            if int(count[0]) + 1 != int(count[1]):
                return [0, data]
            elif int(count[0]) + 1 == int(count[1]):
                first_digit = new_dict[count[0]] + new_dict[count[1]]
                if int(count[2]) + 1 != int(count[3]):
                    return [0, data]
                elif int(count[2]) + 1 == int(count[3]):
                    second_digit = new_dict[count[2]] + new_dict[count[3]]
                    return [1, first_digit + '-' + second_digit]


def add_master(name, data, user_id, master_name, master_last_name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'INSERT INTO schedule (master, day, title, system, description, count_players, duration, time, '
        f'address, cost, before_game, photo, additionally, signed_players, players, master_id, master_name, '
        f'master_last_name) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',
        (name, data, data, data, data, data, data, data, data, data, data, data, data, data, data,
         user_id, master_name, master_last_name))
    conn.commit()
    cursor.close()
    conn.close()


def delete_master(username):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM schedule WHERE master=%s ', (username,))
    conn.commit()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM players WHERE master=%s ', (username,))
    conn.commit()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM announcements WHERE master=%s ', (username,))
    conn.commit()
    cursor.close()
    conn.close()


def add_inf_masters(data, key, name):
    count = data.count('\n')
    if count != 0:
        data = data.replace('\n', ' ')
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    all_data = {'title': 'UPDATE schedule SET title=%s WHERE id=%s',
                'system': 'UPDATE schedule SET system=%s WHERE id=%s',
                'description': 'UPDATE schedule SET description=%s WHERE id=%s',
                'count_players': 'UPDATE schedule SET count_players=%s WHERE id=%s',
                'duration': 'UPDATE schedule SET duration=%s WHERE id=%s',
                'time': 'UPDATE schedule SET time=%s WHERE id=%s',
                'day': 'UPDATE schedule SET day=%s WHERE id=%s',
                'address': 'UPDATE schedule SET address=%s WHERE id=%s',
                'cost': 'UPDATE schedule SET cost=%s WHERE id=%s',
                'before_game': 'UPDATE schedule SET before_game=%s WHERE id=%s',
                'photo': 'UPDATE schedule SET photo=%s WHERE id=%s',
                'additionally': 'UPDATE schedule SET additionally=%s WHERE id=%s',
                }
    cursor.execute(
        'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
    result = cursor.fetchall()
    masters_id = [elem[0] for elem in result]
    masters_id.sort()
    master_id = masters_id[-1]
    text = all_data.get(key)
    cursor.execute(text, (data, int(master_id)))
    conn.commit()
    cursor.close()
    conn.close()


def main_menu_master(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
    markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É'), types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É'),
               types.KeyboardButton('–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∏–≥—Ä'), types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞'))
    return markup


def main_menu_admin(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
    markup.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤ :)'),
               types.KeyboardButton('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø'),
               types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∏–≥—Ä'),
               types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    return markup


def back_to_main_menu_admin(message):
    result = main_menu_admin(message)
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=result)


def btn_back_to_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    return markup


def back_to_main_menu(message):
    result = main_menu_master(message)
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=result)


def copy_game(data, name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM schedule WHERE master=%s', (name, ))
    masters_id = cursor.fetchall()
    cursor.close()
    conn.close()

    masters_id = [elem[0] for elem in masters_id]
    master_id = masters_id[data]

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT master, title, system, description, address, day, time, before_game, count_players, duration, '
        f'cost, additionally, photo, signed_players, players, master_id, master_name, master_last_name FROM schedule '
        f'WHERE id = {int(master_id)}')
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'INSERT INTO schedule (master, title, system, description, address, day, time, '
        f'before_game, count_players, duration, cost, additionally, photo, signed_players, players, master_id, '
        f'master_name, master_last_name) VALUES {result[0]}')
    conn.commit()
    cursor.close()
    conn.close()

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'DELETE FROM schedule WHERE id = {int(master_id)}')
    conn.commit()
    cursor.close()
    conn.close()


def delete_game(name, argument):
    if argument == 'master':
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
        result = cursor.fetchall()
        cursor.close()
        conn.close()

        masters_id = [elem[0] for elem in result]
        masters_id.sort()
        master_id = int(masters_id[-1])

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT schedule.title FROM schedule WHERE id=%s', (int(master_id),))
        title = cursor.fetchall()[0][0]
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT players.game FROM players WHERE game=%s', (title, ))
        games = cursor.fetchall()
        cursor.close()
        conn.close()

        if len(games) != 0:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM players WHERE game=%s ', (title,))
            conn.commit()
            cursor.close()
            conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'DELETE FROM schedule WHERE id=%s ', (int(master_id),))
        conn.commit()
        cursor.close()
        conn.close()
    elif argument == 'admin':
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'DELETE FROM schedule WHERE title=%s ', (name, ))
        conn.commit()
        cursor.close()
        conn.close()

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT players.game FROM players WHERE game=%s', (name,))
        games = cursor.fetchall()
        cursor.close()
        conn.close()

        if len(games) != 0:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM players WHERE game=%s ', (name,))
            conn.commit()
            cursor.close()
            conn.close()


def check_buttons(name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    master_id = [elem[0] for elem in result]
    master_id.sort()
    edit = {}

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT schedule.title, schedule.system, schedule.description, schedule.duration,'
                   'schedule.address, schedule.day, schedule.time, schedule.before_game, schedule.cost, '
                   'schedule.count_players, schedule.additionally, schedule.photo '
                   'FROM schedule WHERE schedule.id=%s', (master_id[-1], ))
    data = cursor.fetchall()
    cursor.close()
    conn.close()

    new_data = data[0]
    for i in range(len(new_data)):
        if new_data[i] != '-':
            edit[i] = '‚úÖ ‚Äî '
    return edit


def check_buttons_short(name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    master_id = [elem[0] for elem in result]
    master_id.sort()
    edit = {}

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT schedule.title, schedule.description, schedule.photo FROM schedule '
                   'WHERE schedule.id=%s', (master_id[-1], ))
    data = cursor.fetchall()
    cursor.close()
    conn.close()

    new_data = data[0]
    for i in range(len(new_data)):
        if new_data[i] != '-':
            edit[i] = '‚úÖ ‚Äî '
    return edit


def master_schedule_elements(name):
    result = check_buttons(name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if len(result) == 0:
        markup.add(types.KeyboardButton(master_schedule_buttons[0]),
                   types.KeyboardButton(master_schedule_buttons[1]), types.KeyboardButton(master_schedule_buttons[2]),
                   types.KeyboardButton(master_schedule_buttons[3]), types.KeyboardButton(master_schedule_buttons[4]),
                   types.KeyboardButton(master_schedule_buttons[5]), types.KeyboardButton(master_schedule_buttons[6]),
                   types.KeyboardButton(master_schedule_buttons[7]), types.KeyboardButton(master_schedule_buttons[8]),
                   types.KeyboardButton(master_schedule_buttons[9]), types.KeyboardButton(master_schedule_buttons[10]),
                   types.KeyboardButton(master_schedule_buttons[11]), types.KeyboardButton(master_schedule_buttons[12]),
                   types.KeyboardButton(master_schedule_buttons[13]))

    else:
        new_buttons = master_schedule_buttons.copy()
        for elem in result:
            new_buttons[elem] = result.get(elem) + master_schedule_buttons[elem]
        markup.add(types.KeyboardButton(new_buttons[0]), types.KeyboardButton(new_buttons[1]),
                   types.KeyboardButton(new_buttons[2]), types.KeyboardButton(new_buttons[3]),
                   types.KeyboardButton(new_buttons[4]), types.KeyboardButton(new_buttons[5]),
                   types.KeyboardButton(new_buttons[6]), types.KeyboardButton(new_buttons[7]),
                   types.KeyboardButton(new_buttons[8]), types.KeyboardButton(new_buttons[9]),
                   types.KeyboardButton(new_buttons[10]), types.KeyboardButton(new_buttons[11]),
                   types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∏–≥—Ä—ã üé≤'),
                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'), types.KeyboardButton(new_buttons[12]),
                   types.KeyboardButton(new_buttons[13]))
    return markup


def master_short_schedule_elements(name):
    result = check_buttons_short(name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if len(result) == 0:
        markup.add(types.KeyboardButton(master_short_schedule_buttons[0]),
                   types.KeyboardButton(master_short_schedule_buttons[1]),
                   types.KeyboardButton(master_short_schedule_buttons[2]),
                   types.KeyboardButton(master_short_schedule_buttons[3]),
                   types.KeyboardButton(master_short_schedule_buttons[4]))
    else:
        new_buttons = master_short_schedule_buttons.copy()
        for elem in result:
            new_buttons[elem] = result.get(elem) + master_short_schedule_buttons[elem]
        markup.add(types.KeyboardButton(new_buttons[0]), types.KeyboardButton(new_buttons[1]),
                   types.KeyboardButton(new_buttons[2]), types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∏–≥—Ä—ã üé≤'),
                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'), types.KeyboardButton(new_buttons[3]),
                   types.KeyboardButton(new_buttons[4]))
    return markup


def get_data_for_master(name, argument):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    if argument == 'show_photo':
        cursor.execute(
            'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
        result = cursor.fetchall()
        cursor.close()
        conn.close()

        masters_id = [elem[0] for elem in result]
        masters_id.sort()
        master_id = masters_id[-1]

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            f'SELECT schedule.photo FROM schedule WHERE id=%s', (int(master_id),))
        photo = cursor.fetchall()[0][0]
        cursor.close()
        conn.close()
        return photo

    elif argument == 'show_games_one_master':
        cursor.execute(
            'SELECT schedule.title FROM schedule WHERE master=%s', (name,))
        answer = cursor.fetchall()
        cursor.close()
        conn.close()
        result = [elem[0] for elem in answer]
        return result
    elif argument == 'show_all_games':
        cursor.execute(
            'SELECT schedule.title FROM schedule')
        answer = cursor.fetchall()
        cursor.close()
        conn.close()
        result = [elem[0] for elem in answer]
        return result
    elif argument == 'get_game':
        cursor.execute(
            'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
        result = cursor.fetchall()
        cursor.close()
        conn.close()

        masters_id = [elem[0] for elem in result]
        masters_id.sort()
        master_id = masters_id[-1]

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT schedule.title FROM schedule WHERE id=%s', (int(master_id),))
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        title = result[0][0]
        return title
    elif argument == 'show_masters':
        cursor.execute(
            'SELECT schedule.master FROM schedule')
        masters = cursor.fetchall()
        cursor.close()
        conn.close()

        if len(masters) == 1:
            result = masters[0][0]
        elif len(masters) == 0:
            result = '–ú–∞—Å—Ç–µ—Ä–∞ –µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüòî\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ üëÄ'
        else:
            new_list = [master[0] for master in masters]
            result = list(set(new_list))
        return result


def check_replay_announcements(master, data):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT announcements.chat_name, announcements.text FROM announcements WHERE master=%s', (master, ))
    chats = cursor.fetchall()
    cursor.close()
    conn.close()
    if data in chats:
        return False
    else:
        return True


def announce_game(name, argument):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT schedule.id FROM schedule WHERE master=%s', (name,))
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    masters_id = [elem[0] for elem in result]
    masters_id.sort()
    master_id = masters_id[-1]

    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT schedule.master, schedule.title, schedule.system, schedule.description, schedule.duration, '
        f'schedule.address, schedule.day, schedule.time, schedule.before_game, schedule.cost, '
        f'schedule.count_players, schedule.signed_players, schedule.additionally FROM schedule WHERE id=%s',
        (int(master_id),))
    last_game = cursor.fetchall()[0]
    cursor.close()
    conn.close()

    answer = {}
    for i in range(len(last_game)):
        if last_game[i] != '-':
            answer[titles_for_masters[i]] = last_game[i]
    len_answer = len(answer)
    count = 0

    text = ''
    for word in answer:
        new_word = answer.get(word)
        count += 1
        if word == '–ú–∞—Å—Ç–µ—Ä':
            text += '*' + word + '*' + '\n' + '@' + new_word + '\n‚Äî\n'
        else:
            if count == len_answer:
                text += '*' + word + '*' + '\n' + new_word
            if count != len_answer:
                text += '*' + word + '*' + '\n' + new_word + '\n‚Äî\n'

    len_text = len(text)

    if argument == 'announce':
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            f'INSERT INTO announcements (text, master, chat_name, chat_link, chat_id) VALUES (%s, %s, %s, %s, %s)',
            (text, name, '-', '-', '-'))
        conn.commit()
        cursor.close()
        conn.close()

        name_bot = '@GamesNSbot'
        return (f'üî•üî•üî•\n–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ê –≤–æ—Ç –∏ –∞–Ω–æ–Ω—Å –Ω–æ–≤–æ–π –∏–≥—Ä—ã!\nüî•üî•üî•\n\n{text}\n\nüé≤ –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ '
                f'{name_bot} üé≤', len_text)

    elif argument == 'show':
        name_bot = '@GamesNSbot'
        return (f'üî•üî•üî•\n–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ê –≤–æ—Ç –∏ –∞–Ω–æ–Ω—Å –Ω–æ–≤–æ–π –∏–≥—Ä—ã!\nüî•üî•üî•\n\n{text}\n\nüé≤ –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ '
                f'{name_bot} üé≤', len_text)


def get_announce_game(name, chat, id_chat, argument):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        f'SELECT announcements.text FROM announcements WHERE chat_link=%s', ('-',))
    announcement = cursor.fetchall()
    cursor.close()
    conn.close()

    announcement = announcement[0][0]
    if check_replay_announcements(name, (chat, announcement)) or argument == 'replay':
        link = get_chats('get_link', chat)

        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            f'UPDATE announcements SET chat_name=%s, chat_id=%s, chat_link=%s WHERE chat_name=%s',
            (chat, id_chat, link, '-',))
        conn.commit()
        cursor.close()
        conn.close()

        name_bot = '@GamesNSbot'
        return (f'üî•üî•üî•\n–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ê –≤–æ—Ç –∏ –∞–Ω–æ–Ω—Å –Ω–æ–≤–æ–π –∏–≥—Ä—ã!\nüî•üî•üî•\n\n{announcement}\n\nüé≤ '
                f'–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ {name_bot} üé≤')
    else:
        return '–í—ã —É–∂–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–ª–∏ —Å–≤–æ–π –∞–Ω–æ–Ω—Å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ :)\n–í—ã–ª–æ–∂–∏—Ç—å –µ—â—ë —Ä–∞–∑?'


def delete_announce_game(name):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM announcements WHERE chat_name=%s ', ('-',))
    conn.commit()
    cursor.close()
    conn.close()


def check_games_master(master):
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM schedule WHERE master=%s', (master, ))
    games = cursor.fetchall()
    cursor.close()
    conn.close()

    id_games = []
    for game in games:
        schedule = [elem for elem in game if elem != '-']
        if len(schedule) == 5:
            id_games.append(schedule[-1])

    if len(id_games):
        for id_game in id_games:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM schedule WHERE id=%s ', (int(id_game),))
            conn.commit()
            cursor.close()
            conn.close()


class ConvertionException(Exception):
    pass


class MyCustomException(Exception):
    pass


@bot.message_handler(commands=['start', ])
def start(message: telebot.types.Message):
    if message.chat.type == 'private':
        username = message.from_user.username
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if message.text == '/help_me':
            help_me(message)
        elif message.text == '/roll_the_dice':
            roll_the_dice(message)
        else:
            admins = get_admins()
            if username in admins:
                delete_announce_game(username)
                markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'),
                           types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'),
                           types.KeyboardButton('–Ø ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä :)'))
                bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–µ—à–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ "
                                                       "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç :)".format(message.from_user),
                                 reply_markup=markup)
                bot.register_next_step_handler(message, player_master_admin)
            else:
                delete_announce_game(username)
                markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'),
                           types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'))
                bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–µ—à–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ "
                                                       "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç :)".format(message.from_user),
                                 reply_markup=markup)
                bot.register_next_step_handler(message, player_master_admin)


@bot.message_handler(commands=['help_me', ])
def help_me(message: telebot.types.Message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ'))
        bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è :)\n–≠—Ç–æ—Ç –±–æ—Ç –º–æ–≥—É—Ç '
                                               '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –∏ –∏–≥—Ä–æ–∫–∏. –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫ '
                                               '–∏–º–µ–Ω–Ω–æ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç:\n'
                                               '–ï—Å–ª–∏ –≤—ã –º–∞—Å—Ç–µ—Ä, —Ç–æ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∏ '
                                               '—Å–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                                               '—Å–≤–æ–∏—Ö –∏–≥—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ <–†–µ–¥–∞–∫—Ç–∏—Ä–æ–æ–≤–∞—Ç—å –∏–≥—Ä—É>. –¢–∞–º –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å '
                                               '–∏–≥—Ä—É.\n'
                                               '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∏–≥—Ä –∏ –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∏–≥—Ä—ã '
                                               '–≤ —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ :)\n'
                                               '–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫ –≤–∞–º –Ω–∞ –∏–≥—Ä—É –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ '
                                               '–∑–∞–ø–∏—Å–∞–ª—Å—è –∫ –≤–∞–º –Ω–∞ –∏–≥—Ä—É :)\n–ï—Å–ª–∏ –≤—ã –∏–≥—Ä–æ–∫, —Ç–æ –≤—Å—ë –µ—â—ë –ø—Ä–æ—â–µ: –≤—ã –ø—Ä–æ—Å—Ç–æ '
                                               '–≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å :) '
                                               '–ü–æ—Ç–æ–º —Ç–∞–∫–∂–µ –ª–µ–≥–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ª—é–±–æ–π –∏–≥—Ä—ã :)\n'
                                               '–ù–∞–¥–µ—é—Å—å, –≤—Å—ë —Å—Ç–∞–ª–æ —á—É—Ç–æ—á–∫—É –ø–æ–Ω—è—Ç–Ω–µ–µ ‚ò∫Ô∏è'.format(message.from_user),
                         reply_markup=markup)
        bot.register_next_step_handler(message, start)


@bot.message_handler(commands=['roll_the_dice', ])
def roll_the_dice(message: telebot.types.Message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if message.text == '/start':
            start(message)
        elif message.text == '/help_me':
            help_me(message)
        else:
            markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D20'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D12'),
                       types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D10'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D8'),
                       types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D6'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D4'))
            bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–±–∏–∫–∞ :)'.format(message.from_user),
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw)


@bot.message_handler(content_types=['text', 'photo'])
def handle_edefaultor(message):
    bot.send_message(message.chat.id,
                     text='*–°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ë–£–ö–í üò≥üò≥üò≥*\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∏ —Ç–µ–ª–µ–≥—Ä–∞–º'
                          ' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–∏–ª –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, —Ç–∞–∫ –∫–∞–∫ —É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –µ—Å—Ç—å —Å–≤–æ–∏ '
                          '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ.\n–ï—Å–ª–∏ –≤—ã –∑–∞–ø–æ–ª–Ω—è–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                          '–ø–æ–ø–∞–ª–∞ –ª–∏—à—å —á–∞—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–µ–∫—Å—Ç–∞ :(\n–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ '
                          '–≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∏–≥—Ä—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç :)'
                     .format(message.from_user), parse_mode='Markdown')


def player_master_admin(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        admins = get_admins()
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)':
                        check_games_master(username)
                        main_menu = main_menu_master(message)
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu, )
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–Ø ‚Äî –∏–≥—Ä–æ–∫ :)':
                        check_games_player(username)
                        main_menu = main_menu_player(message)
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == '–Ø ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä :)':
                        main_menu = main_menu_admin(message)
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu)
                        bot.register_next_step_handler(message, admin_actions)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö :)".\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')

            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                if username in admins:
                    markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'), types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'),
                               types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤ :)'))
                else:
                    markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'), types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'))

                bot.send_message(message.chat.id, text='–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö üòå\n‚Äî\n–ò–ª–∏ '
                                                       '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                                 format(message.from_user), reply_markup=markup)
                bot.register_next_step_handler(message, player_master_admin)

        except ConvertionException as e:
            delete_announce_game(username)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            if username in admins:
                markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'), types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'),
                           types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤ :)'))
                bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
                bot.register_next_step_handler(message, player_master_admin)
            else:
                markup.add(types.KeyboardButton('–Ø ‚Äî –º–∞—Å—Ç–µ—Ä :)'), types.KeyboardButton('–Ø ‚Äî –∏–≥—Ä–æ–∫ :)'))
                bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
                bot.register_next_step_handler(message, player_master_admin)


def throw(message: telebot.types.Message):
    if message.chat.type == 'private':
        text = '–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –±—Ä–æ—Å–∞—Ç—å? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ :)'
        user_name = message.from_user.first_name
        try:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–ë—Ä–æ—Å–∏—Ç—å D20':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d20)
                elif message.text == '–ë—Ä–æ—Å–∏—Ç—å D12':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d12)
                elif message.text == '–ë—Ä–æ—Å–∏—Ç—å D10':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d10)
                elif message.text == '–ë—Ä–æ—Å–∏—Ç—å D8':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d8)
                elif message.text == '–ë—Ä–æ—Å–∏—Ç—å D6':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d6)
                elif message.text == '–ë—Ä–æ—Å–∏—Ç—å D4':
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, throw_d4)
                else:
                    raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–±–∏–∫–∞ :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π '
                                              '–ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
        except ConvertionException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D20'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D12'),
                       types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D10'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D8'),
                       types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D6'), types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å D4'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, throw)


def check(message: telebot.types.Message):
    pass


def throw_d20(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 20, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–ª–∏ –≤–≤–µ–ª–∏ –µ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–æ–Ω–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, '
                                                  '*–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D20 –±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D20 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d20)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d20)


def throw_d12(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 12, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D12 '
                                                  '–±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D12 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d12)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d12)


def throw_d10(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 10, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D10 '
                                                  '–±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D10 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d10)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d10)


def throw_d8(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 8, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D8 '
                                                  '–±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D8 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d8)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d8)


def throw_d6(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 6, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D6 '
                                                  '–±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D6 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d6)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d6)


def throw_d4(message: telebot.types.Message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text.isdigit():
                        result = []
                        for i in range(int(message.text)):
                            new_digit = random.randrange(1, 4, 1)
                            result.append(new_digit)
                        markup.add(types.KeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑?'))
                        bot.send_message(message.chat.id, f'{user_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –±—Ä–æ—Å–∫–∞\n\n üé≤ {result} üé≤',
                                         reply_markup=markup)
                        bot.register_next_step_handler(message, roll_the_dice)
                    else:
                        raise ConvertionException('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ :(\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D4 '
                                                  '–±—Ä–æ—Å–∏—Ç—å*.\n–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å üòî\n'
                                                       '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ, *–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ D4 –±—Ä–æ—Å–∏—Ç—å*.\n'
                                                       '–ù–∞–ø—Ä–∏–º–µ—Ä, 3 :)'.format(message.from_user),
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, throw_d4)
        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', parse_mode='Markdown',
                             reply_markup=markup)
            bot.register_next_step_handler(message, throw_d4)


def admin_actions(message: telebot.types.Message):
    if message.chat.type == 'private':
        username = message.from_user.username
        delete_announce_game(username)
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        user_last_name = message.from_user.last_name
        check_games_master(username)
        number_of_games = get_data_for_master(username, 'show_games_one_master')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        chats = get_chats('get_name', '')
        games = get_data_for_player(username, 'show_games')
        global games_for_admin
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    games_for_admin = []
                    start(message)
                elif message.text == '/help_me':
                    games_for_admin = []
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    games_for_admin = []
                    roll_the_dice(message)
                elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    games_for_admin = []
                    back_to_main_menu_admin(message)
                    bot.register_next_step_handler(message, admin_actions)
                else:
                    if message.text in chats:
                        markup.add(types.KeyboardButton('–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É üòå'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        bot.send_message(message.chat.id, text='–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É? –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ —Å–º–æ–≥—É—Ç '
                                                               '–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–º —Å–≤–æ–∏ –∏–≥—Ä—ã :('
                                         .format(message.from_user), reply_markup=markup)
                        bot.register_next_step_handler(message, admin_actions)
                    elif message.text in games:
                        indexes = []
                        for i in range(len(message.text)):
                            if message.text[i] == '"':
                                indexes.append(i)
                        first = indexes[0] + 1
                        game = message.text[first:indexes[1]]
                        games_for_admin.append(game)
                        answer = get_data_for_player(game, 'show_concrete_game')
                        markup.add(types.KeyboardButton('–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É üòå'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        if type(answer) is list:
                            photo = answer[0]
                            text = answer[1]
                            bot.send_photo(message.chat.id, photo, text, parse_mode='Markdown')
                            bot.send_message(message.chat.id, text='–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É?', reply_markup=markup)
                            bot.register_next_step_handler(message, admin_actions)
                        else:
                            bot.send_message(message.chat.id, answer, parse_mode='Markdown')
                            bot.send_message(message.chat.id, text='–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É?', reply_markup=markup)
                            bot.register_next_step_handler(message, admin_actions)
                    elif message.text == '–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É üòå':
                        pass
                    elif message.text == '–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É üòå':
                        game = games_for_admin[-1]
                        games_for_admin = []
                        delete_game(game, 'admin')
                        bot.send_message(message.chat.id, text=f'{user_name}, –≤—ã —É–¥–∞–ª–∏–ª–∏ –∏–≥—Ä—É :)')
                        back_to_main_menu_admin(message)
                        bot.register_next_step_handler(message, admin_actions)
                    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤ :)':
                        bot.send_message(message.chat.id, text='–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, '
                                                               '–ø—É–±–ª–∏—á–Ω–∞—è –∏ —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –≤ –Ω–µ–π —Å–æ—Å—Ç–æ–∏—Ç.\n–ï—Å–ª–∏ –Ω–µ '
                                                               '—Å–æ—Å—Ç–æ–∏—Ç, —Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ :)'
                                                               '\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ :)'
                                         .format(message.from_user))
                        bot.register_next_step_handler(message, write_chats)
                    elif message.text == '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø':
                        if len(chats) == 0:
                            main_menu = main_menu_admin(message)
                            bot.send_message(message.chat.id, text=f'{user_name}, –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å –∏–≥—Ä–∞–º–∏ :(')
                            bot.send_message(message.chat.id, text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'
                                             .format(message.from_user), reply_markup=main_menu, )
                            bot.register_next_step_handler(message, admin_actions)
                        else:
                            for chat in chats:
                                markup.add(chat)
                            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                            bot.send_message(message.chat.id,
                                             text=f'{user_name}, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ '
                                                  f'–Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É :)', reply_markup=markup)
                            bot.register_next_step_handler(message, admin_actions)
                    elif message.text == '–°–ø–∏—Å–æ–∫ –∏–≥—Ä':
                        if len(games) == 0:
                            bot.send_message(message.chat.id, text='–ú–∞—Å—Ç–µ—Ä–∞ –µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüòî\n'
                                                                   '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ üëÄ')
                            back_to_main_menu_admin(message)
                            bot.register_next_step_handler(message, admin_actions)
                        else:
                            for game in games:
                                markup.add(types.KeyboardButton(game))
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id, text="{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ "
                                                                   "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)".format(message.from_user),
                                             reply_markup=markup)
                            bot.register_next_step_handler(message, admin_actions)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                result = main_menu_admin(message)
                bot.send_message(message.chat.id,
                                 text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ '
                                      '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.format(message.from_user),
                                 reply_markup=result)
                bot.register_next_step_handler(message, admin_actions)

        except ConvertionException as e:
            result = main_menu_admin(message)
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=result)
            bot.register_next_step_handler(message, admin_actions)


def write_chats(message):
    if message.chat.type == 'private':
        user_name = message.from_user.first_name
        btn_back = btn_back_to_main_menu(message)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu_admin(message)
                    bot.register_next_step_handler(message, admin_actions)
                else:
                    if message.text[0:13] == 'https://t.me/' or message.text[0:5] == 't.me/':
                        if message.text[0:5] == 't.me/':
                            link = 'https://' + message.text
                        else:
                            link = message.text
                        if not check_replay_links(link):
                            id_group = bot.get_chat('@' + link[13:]).id
                            if not check_bot_group_membership(TOKEN, id_group):
                                bot.send_message(message.chat.id, text="–ë–æ—Ç –µ—â—ë –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏ –ø–æ—ç—Ç–æ–º—É –Ω–µ "
                                                                       "—Å–º–æ–∂–µ—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–∞–º –∞–Ω–æ–Ω—Å—ã :(\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                                                       "–∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ "
                                                                       "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞ :)".
                                                 format(message.from_user), reply_markup=btn_back)
                                bot.register_next_step_handler(message, write_chats)
                            elif check_bot_group_membership(TOKEN, id_group):
                                add_chats_to_database(link)
                                bot.send_message(message.chat.id, text="–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç "
                                                                       "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∏–≥—Ä—ã :)\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª–æ "
                                                                       "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º :)".
                                                 format(message.from_user), reply_markup=btn_back)
                                bot.register_next_step_handler(message, write_chats)
                        elif check_replay_links(link):
                            bot.send_message(message.chat.id, text='–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ :)\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å '
                                                                   '–≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º :)'.
                                             format(message.from_user), reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_chats)

                    else:
                        raise ConvertionException(f'–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ - <{message.text}>\n'
                                                  f'–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ "https: // t.me /<–Ω–∞–∑–≤–∞–Ω–∏–µ>"\n'
                                                  f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≥—Ä—É–ø–ø—É :)'
                                                  '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É üòî\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ '
                                                       '—Ç–µ–ª–µ–≥—Ä–∞–º–º –≥—Ä—É–ø–ø—É :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π '
                                                       '–ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                                 format(message.from_user), reply_markup=btn_back)
                bot.register_next_step_handler(message, write_chats)

        except ConvertionException as e:
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}')
            bot.register_next_step_handler(message, write_chats)


def master_actions(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        delete_announce_game(username)
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        user_last_name = message.from_user.last_name
        check_games_master(username)
        number_of_games = get_data_for_master(username, 'show_games_one_master')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É':
                        add_master(username, '-', user_id, user_name, user_last_name)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                        markup.add(types.KeyboardButton('–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                                   types.KeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        bot.send_message(message.chat.id,
                                         text='–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π '
                                              '–∏–≥—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞ :)'
                                         .format(message.from_user), reply_markup=markup, )
                        bot.register_next_step_handler(message, quick_or_detailed)
                    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É':
                        if len(number_of_games) == 0:
                            btn_back = btn_back_to_main_menu(message)
                            bot.send_message(message.chat.id,
                                             text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=btn_back)
                            bot.register_next_step_handler(message, show_master_schedule)
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                            for i in range(len(number_of_games)):
                                btn = types.KeyboardButton(number_of_games[i])
                                markup.add(btn)
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å :)', reply_markup=markup)
                            bot.register_next_step_handler(message, edit_master_schedule)
                    elif message.text == '–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∏–≥—Ä':
                        if len(number_of_games) == 0:
                            btn_back = btn_back_to_main_menu(message)
                            bot.send_message(message.chat.id,
                                             text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=btn_back)
                            bot.register_next_step_handler(message, show_master_schedule)
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                            for i in range(len(number_of_games)):
                                btn = types.KeyboardButton(number_of_games[i])
                                markup.add(btn)
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)', reply_markup=markup)
                            bot.register_next_step_handler(message, show_master_schedule)
                    elif message.text == '–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å—Å—è, –Ω–∞–¥–æ–µ–ª–æ –≤—Å—ë —É–∂–µ üòê':
                        delete_master(username)
                        bot.send_message(message.chat.id, text='{0.first_name}, –≤—ã —É–¥–∞–ª–∏–ª–∏—Å—å –∏–∑ –±–æ—Ç–∞ :)'
                                         .format(message.from_user))
                    elif message.text == '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª! –Ø –æ—Å—Ç–∞—é—Å—å üòâ':
                        check_games_master(username)
                        result = main_menu_master(message)
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'
                                         .format(message.from_user), reply_markup=result, )
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                        markup.add(types.KeyboardButton('–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å—Å—è, –Ω–∞–¥–æ–µ–ª–æ –≤—Å—ë —É–∂–µ üòê'),
                                   types.KeyboardButton('–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª! –Ø –æ—Å—Ç–∞—é—Å—å üòâ'))
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞?\n–¢–æ–≥–¥–∞ –≤—Å–µ –≤–∞—à–∏ '
                                              '–∑–∞–ø–∏—Å–∏ —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç—Å—è :('.format(message.from_user), reply_markup=markup)
                        bot.register_next_step_handler(message, master_actions)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                result = main_menu_master(message)
                bot.send_message(message.chat.id,
                                 text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ '
                                      '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.format(message.from_user),
                                 reply_markup=result)
                bot.register_next_step_handler(message, master_actions)

        except ConvertionException as e:
            result = main_menu_master(message)
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=result)
            bot.register_next_step_handler(message, master_actions)


def quick_or_detailed(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)':
                        master_short_elements = master_short_schedule_elements(username)
                        bot.send_message(message.chat.id,
                                         text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ :)'.format(message.from_user),
                                         reply_markup=master_short_elements)
                        bot.register_next_step_handler(message, short_schedule)

                    elif message.text == '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)':
                        master_elements = master_schedule_elements(username)
                        bot.send_message(message.chat.id,
                                         text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ :)'.format(message.from_user),
                                         reply_markup=master_elements, )
                        bot.register_next_step_handler(message, master_schedule)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton('–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                           types.KeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö:)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                      '–Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.format(message.from_user),
                                 reply_markup=markup, )
                bot.register_next_step_handler(message, quick_or_detailed)

        except ConvertionException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                       types.KeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :)'),
                       types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, quick_or_detailed)


def short_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    else:
                        btn_back = btn_back_to_main_menu(message)
                        if message.text == '–ù–∞–∑–≤–∞–Ω–∏–µ' or message.text == '‚úÖ ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ':
                            bot.send_message(message.chat.id, text='–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∞ –∏–≥—Ä–∞? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_title_short)
                        elif message.text == '–û–ø–∏—Å–∞–Ω–∏–µ' or message.text == '‚úÖ ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ':
                            bot.send_message(message.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ (–∏–ª–∏ –Ω–µ –∫—Ä–∞—Ç–∫–æ–µ) '
                                                                   '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–≥—Ä—ã :)', reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_description_short)
                        elif message.text == '–ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã' or message.text == '‚úÖ ‚Äî –ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã':
                            bot.send_message(message.chat.id, text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞—Å—Ç–∞–≤–∫—É –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã :)\n–ï—Å–ª–∏ –≤—ã '
                                                                   '—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ '
                                                                   '—Å–æ–æ–±—â–µ–Ω–∏–∏ "-" '
                                                                   ':)', reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_photo_short)
                        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∏–≥—Ä—ã üé≤':
                            check_games_master(username)
                            result = main_menu_master(message)
                            number_of_games = get_data_for_master(username, 'show_games_one_master')
                            if len(number_of_games) == 0:
                                bot.send_message(message.chat.id,
                                                 text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=result)
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                                   is_persistent=False)
                                picture = get_data_for_master(username, 'show_photo')
                                announcement = announce_game(username, 'show')
                                len_text = announcement[1]
                                text = announcement[0]
                                if picture != '-':
                                    if len_text <= 1024:
                                        bot.send_photo(message.chat.id, picture, text, parse_mode='Markdown')
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id, text='{0.first_name}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã '
                                                                               '—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ :)'.
                                                         format(message.from_user), reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ –ø–æ–¥ '
                                                f'–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å –∞–Ω–æ–Ω—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞—Å—Ç–∞–≤–∫–æ–π :(\n–î–ª–∏–Ω–∞ '
                                                f'–≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '
                                                f'= 1024 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                elif picture == '-':
                                    if len_text <= 4096:
                                        bot.send_message(message.chat.id, text, parse_mode='Markdown')
                                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                                           is_persistent=False)
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id, text='{0.first_name}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã '
                                                                               '—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ :)'.
                                                         format(message.from_user), reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ :(\n'
                                                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Å–∏–º–≤–æ–ª–æ–≤ = 4096 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ '
                                                f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                        elif message.text == '–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•':
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                               is_persistent=False)
                            announcement = announce_game(username, 'announce')
                            chats = get_chats('get_name', '-')
                            picture = get_data_for_master(username, 'show_photo')
                            len_text = announcement[1]
                            text = announcement[0]
                            if len(chats) == 0:
                                result = main_menu_master(message)
                                bot.send_message(message.chat.id, text=f'{user_name}, –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å –∏–≥—Ä–∞–º–∏, '
                                                                       f'–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∏–≥—Ä—É :(')
                                bot.send_message(message.chat.id,
                                                 text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.format(
                                                     message.from_user),
                                                 reply_markup=result, )
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                if picture != '-':
                                    if len_text <= 1024:
                                        bot.send_photo(message.chat.id, picture, text, parse_mode='Markdown')
                                        for chat in chats:
                                            markup.add(chat)
                                        markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã '
                                                                        'üî•üî•üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id,
                                                         text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é '
                                                              f'–≥—Ä—É–ø–ø—É –∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)',
                                                         reply_markup=markup)
                                        bot.register_next_step_handler(message, send_announcement)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ –ø–æ–¥ '
                                                f'–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å –∞–Ω–æ–Ω—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞—Å—Ç–∞–≤–∫–æ–π :(\n–î–ª–∏–Ω–∞ '
                                                f'–≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '
                                                f'= 1024 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                elif picture == '-':
                                    if len_text <= 4096:
                                        bot.send_message(message.chat.id, text, parse_mode='Markdown')
                                        for chat in chats:
                                            markup.add(chat)
                                        markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã '
                                                                        'üî•üî•üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id,
                                                         text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É'
                                                              f' –∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)', reply_markup=markup)
                                        bot.register_next_step_handler(message, send_announcement)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ :(\n'
                                                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Å–∏–º–≤–æ–ª–æ–≤ = 4096 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ '
                                                f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É':
                            check_games_master(username)
                            result = main_menu_master(message)
                            number_of_games = get_data_for_master(username, 'show_games_one_master')
                            if len(number_of_games) == 0:
                                bot.send_message(message.chat.id,
                                                 text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=result)
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                                markup.add(types.KeyboardButton('–î–ê'), types.KeyboardButton('–ù–ï–¢'))
                                result = get_data_for_master(username, 'get_game')
                                inf = f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?\nüé≤üé≤üé≤\n"{result}"'
                                bot.send_message(message.chat.id, text='{0.first_name}, '.format(message.from_user)
                                                                       + inf, reply_markup=markup)
                                bot.register_next_step_handler(message, delete_game_master)
                        else:
                            raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö :)\n‚Äî\n'
                                                      '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                result = master_short_schedule_elements(username)
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö :)\n‚Äî\n'
                                                       '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)',
                                 reply_markup=result)
                bot.register_next_step_handler(message, short_schedule)

        except ConvertionException as e:
            result = master_short_schedule_elements(username)
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=result)
            bot.register_next_step_handler(message, short_schedule)


def back_to_master_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        result = master_schedule_elements(username)
        bot.send_message(message.chat.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ :)'.
                         format(message.from_user), reply_markup=result, )
        bot.register_next_step_handler(message, master_schedule)


def back_to_master_short_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        result = master_short_schedule_elements(username)
        bot.send_message(message.chat.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ :)'.
                         format(message.from_user), reply_markup=result, )
        bot.register_next_step_handler(message, short_schedule)


def master_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    else:
                        btn_back = btn_back_to_main_menu(message)
                        if message.text == '–ù–∞–∑–≤–∞–Ω–∏–µ' or message.text == '‚úÖ ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ':
                            bot.send_message(message.chat.id, text='–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∞ –∏–≥—Ä–∞? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_title)
                        elif message.text == '–°–∏—Å—Ç–µ–º–∞' or message.text == '‚úÖ ‚Äî –°–∏—Å—Ç–µ–º–∞':
                            bot.send_message(message.chat.id, text='–ü–æ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_system)
                        elif message.text == '–û–ø–∏—Å–∞–Ω–∏–µ' or message.text == '‚úÖ ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ':
                            bot.send_message(message.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ (–∏–ª–∏ –Ω–µ –∫—Ä–∞—Ç–∫–æ–µ) '
                                                                   '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–≥—Ä—ã :)', reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_description)
                        elif message.text == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' or message.text == '‚úÖ ‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
                            bot.send_message(message.chat.id, text='–ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ) –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É? '
                                                                   ':)', reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_duration)
                        elif message.text == '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è' or message.text == '‚úÖ ‚Äî –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
                            bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞ :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_address)
                        elif message.text == '–î–µ–Ω—å' or message.text == '‚úÖ ‚Äî –î–µ–Ω—å':
                            bot.send_message(message.chat.id, text='–í –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—É? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_day)
                        elif message.text == '–í—Ä–µ–º—è' or message.text == '‚úÖ ‚Äî –í—Ä–µ–º—è':
                            bot.send_message(message.chat.id, text='–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—É? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_time)
                        elif message.text == '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞' or message.text == '‚úÖ ‚Äî –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞':
                            bot.send_message(message.chat.id,
                                             text='–ù—É–∂–Ω–æ –ª–∏ –∫–∞–∫-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π –∏–≥—Ä–µ? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_before_game)
                        elif message.text == '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è' or message.text == '‚úÖ ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è':
                            bot.send_message(message.chat.id,
                                             text='–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_cost)
                        elif message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤' or message.text == '‚úÖ ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤':
                            bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ '
                                                                   '–¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã :)\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É, '
                                                                   '–Ω–∞–ø—Ä–∏–º–µ—Ä: "4" –∏–ª–∏ "3-5",–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å '
                                                                   '–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_count_players)
                        elif message.text == '–ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã' or message.text == '‚úÖ ‚Äî –ó–∞—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã':
                            bot.send_message(message.chat.id, text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞—Å—Ç–∞–≤–∫—É –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã :)\n–ï—Å–ª–∏ –≤—ã '
                                                                   '—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ '
                                                                   '—Å–æ–æ–±—â–µ–Ω–∏–∏ "-" :)', reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_photo)
                        elif message.text == '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' or message.text == '‚úÖ ‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ':
                            bot.send_message(message.chat.id, text='–ß—Ç–æ –±—ã –≤—ã –µ—â—ë —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? :)',
                                             reply_markup=btn_back)
                            bot.register_next_step_handler(message, write_additionally)
                        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∏–≥—Ä—ã üé≤':
                            check_games_master(username)
                            result = main_menu_master(message)
                            number_of_games = get_data_for_master(username, 'show_games_one_master')
                            if len(number_of_games) == 0:
                                bot.send_message(message.chat.id,
                                                 text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=result)
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                                   is_persistent=False)
                                picture = get_data_for_master(username, 'show_photo')
                                announcement = announce_game(username, 'show')
                                len_text = announcement[1]
                                text = announcement[0]
                                if picture != '-':
                                    if len_text <= 1024:
                                        bot.send_photo(message.chat.id, picture, text, parse_mode='Markdown')
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id, text='{0.first_name}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã '
                                                                               '—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ :)'
                                                         .format(message.from_user), reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ –ø–æ–¥ '
                                                f'–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å –∞–Ω–æ–Ω—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞—Å—Ç–∞–≤–∫–æ–π :(\n–î–ª–∏–Ω–∞ '
                                                f'–≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '
                                                f'= 1024 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                elif picture == '-':
                                    if len_text <= 4096:
                                        bot.send_message(message.chat.id, text, parse_mode='Markdown')
                                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                                           is_persistent=False)
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id, text='{0.first_name}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã '
                                                                               '—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ :)'
                                                         .format(message.from_user), reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ :(\n'
                                                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Å–∏–º–≤–æ–ª–æ–≤ = 4096 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ '
                                                f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)

                        elif message.text == '–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•':
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                               is_persistent=False)
                            announcement = announce_game(username, 'announce')
                            chats = get_chats('get_name', '-')
                            picture = get_data_for_master(username, 'show_photo')
                            len_text = announcement[1]
                            text = announcement[0]
                            if len(chats) == 0:
                                result = main_menu_master(message)
                                bot.send_message(message.chat.id, text=f'{user_name}, –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å –∏–≥—Ä–∞–º–∏, '
                                                                       f'–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∏–≥—Ä—É :(')
                                bot.send_message(message.chat.id,
                                                 text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.format(
                                                     message.from_user),
                                                 reply_markup=result, )
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                if picture != '-':
                                    if len_text <= 1024:
                                        bot.send_photo(message.chat.id, picture, text, parse_mode='Markdown')
                                        for chat in chats:
                                            markup.add(chat)
                                        markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã '
                                                                        'üî•üî•üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id,
                                                         text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é '
                                                              f'–≥—Ä—É–ø–ø—É –∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)',
                                                         reply_markup=markup)
                                        bot.register_next_step_handler(message, send_announcement)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ –ø–æ–¥ '
                                                f'–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å –∞–Ω–æ–Ω—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞—Å—Ç–∞–≤–∫–æ–π :(\n–î–ª–∏–Ω–∞ '
                                                f'–≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '
                                                f'= 1024 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)
                                elif picture == '-':
                                    if len_text <= 4096:
                                        bot.send_message(message.chat.id, text, parse_mode='Markdown')
                                        for chat in chats:
                                            markup.add(chat)
                                        markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã '
                                                                        'üî•üî•üî•'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        bot.send_message(message.chat.id,
                                                         text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é '
                                                              f'–≥—Ä—É–ø–ø—É –∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)',
                                                         reply_markup=markup)
                                        bot.register_next_step_handler(message, send_announcement)
                                    else:
                                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                        text = (f'{user_name}, –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ '
                                                f':(\n–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–µ–π—á–∞—Å = {len_text}, –∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                f'—Å–∏–º–≤–æ–ª–æ–≤ = 4096 :(\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É–º–µ–Ω—å—à–∏—Ç–µ '
                                                f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ üòå')
                                        bot.send_message(message.chat.id, text, reply_markup=markup)
                                        bot.register_next_step_handler(message, master_additional_actions)

                        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É':
                            check_games_master(username)
                            result = main_menu_master(message)
                            number_of_games = get_data_for_master(username, 'show_games_one_master')
                            if len(number_of_games) == 0:
                                bot.send_message(message.chat.id,
                                                 text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ üé≤üé≤üé≤', reply_markup=result)
                                bot.register_next_step_handler(message, master_actions)
                            else:
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                                markup.add(types.KeyboardButton('–î–ê'), types.KeyboardButton('–ù–ï–¢'))
                                result = get_data_for_master(username, 'get_game')
                                inf = f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?\nüé≤üé≤üé≤\n"{result}"'
                                bot.send_message(message.chat.id, text='{0.first_name}, '.format(message.from_user)
                                                                       + inf, reply_markup=markup)
                                bot.register_next_step_handler(message, delete_game_master)

                        else:
                            raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö :)\n‚Äî\n'
                                                      '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                result = master_schedule_elements(username)
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö :)\n‚Äî\n'
                                                       '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)',
                                 reply_markup=result)
                bot.register_next_step_handler(message, master_schedule)

        except ConvertionException as e:
            result = master_schedule_elements(username)
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=result)
            bot.register_next_step_handler(message, master_schedule)


def write_title(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'title', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ üòî\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_title)


def write_title_short(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'title', username)
                    back_to_master_short_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ üòî\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_title_short)


def write_system(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'system', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–∏—Å—Ç–µ–º—É üòî\n–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_system)


def write_description(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                back_to_main_menu(message)
                bot.register_next_step_handler(message, master_actions)
            else:
                add_inf_masters(message.text, 'description', username)
                back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ üòî\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_description)


def write_description_short(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                back_to_main_menu(message)
                bot.register_next_step_handler(message, master_actions)
            else:
                add_inf_masters(message.text, 'description', username)
                back_to_master_short_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ üòî\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_description)


def write_duration(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'duration', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã üòî\n–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_duration)


def write_address(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'address', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å üòî\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_address)


def write_day(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'day', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–Ω—å üòî\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_day)


def write_time(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'time', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è üòî\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_time)


def write_before_game(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'before_game', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, –Ω—É–∂–Ω–æ –ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üòî\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_before_game)


def write_cost(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'cost', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å üòî\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∏–∂–µ :)'
                                                   '\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_cost)


def write_count_players(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    result = check_count_players(message.text)
                    if result[0] == 0:
                        text = (f'–í –≤–∞—à–µ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ :(\n<{result[1]}>\n'
                                f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ :)\n'
                                f'–ù–∞–ø—Ä–∏–º–µ—Ä: "2" –∏–ª–∏ "3-4".')
                        bot.send_message(message.chat.id, text.format(message.from_user), reply_markup=btn_back)
                        bot.register_next_step_handler(message, write_count_players)
                    if result[0] == 1:
                        add_inf_masters(result[1], 'count_players', username)
                        back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ üòî\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ '
                                                   '–Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                             format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_count_players)


def write_photo(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        if message.text == '/start':
            start(message)
        elif message.text == '/help_me':
            help_me(message)
        elif message.text == '/roll_the_dice':
            roll_the_dice(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            back_to_main_menu(message)
            bot.register_next_step_handler(message, master_actions)
        else:
            content_type = message.content_type
            if content_type != 'photo':
                if message.text == '-':
                    add_inf_masters(message.text, 'photo', username)
                    back_to_master_schedule(message)
                else:
                    btn_back = btn_back_to_main_menu(message)
                    bot.send_message(message.chat.id,
                                     text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –∑–∞—Å—Ç–∞–≤–∫–æ–π –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ'
                                          ' "-" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É:)\n‚Äî\n'
                                          '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'
                                     .format(message.from_user),reply_markup=btn_back)
                    bot.register_next_step_handler(message, write_photo)
            else:
                photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                add_inf_masters(photo.file_id, 'photo', username)
                back_to_master_schedule(message)


def write_photo_short(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        if message.text == '/start':
            start(message)
        elif message.text == '/help_me':
            help_me(message)
        elif message.text == '/roll_the_dice':
            roll_the_dice(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            back_to_main_menu(message)
            bot.register_next_step_handler(message, master_actions)
        else:
            content_type = message.content_type
            if content_type != 'photo':
                if message.text == '-':
                    add_inf_masters(message.text, 'photo', username)
                    back_to_master_schedule(message)
                else:
                    btn_back = btn_back_to_main_menu(message)
                    bot.send_message(message.chat.id,
                                     text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –∑–∞—Å—Ç–∞–≤–∫–æ–π –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ'
                                          ' "-" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É:)\n‚Äî\n'
                                          '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.
                                     format(message.from_user), reply_markup=btn_back)
                    bot.register_next_step_handler(message, write_photo)
            else:
                photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                add_inf_masters(photo.file_id, 'photo', username)
                back_to_master_short_schedule(message)


def write_additionally(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        btn_back = btn_back_to_main_menu(message)
        if type(message.text) is str:
            if message.text == '/start':
                start(message)
            elif message.text == '/help_me':
                help_me(message)
            elif message.text == '/roll_the_dice':
                roll_the_dice(message)
            else:
                if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    add_inf_masters(message.text, 'additionally', username)
                    back_to_master_schedule(message)
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏, –Ω—É–∂–Ω–æ –ª–∏ –∫–∞–∫-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üòî'
                                                   '\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π '
                                                   '–ø–ª–∞—à–∫–µ –º–µ–Ω—é :)'.format(message.from_user), reply_markup=btn_back)
            bot.register_next_step_handler(message, write_additionally)


def show_master_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        games = get_data_for_master(username, 'show_games_one_master')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text in games:
                        position = games.index(message.text)
                        copy_game(position, username)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                           is_persistent=False)
                        markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                                   types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

                        announcement = announce_game(username, 'show')
                        picture = get_data_for_master(username, 'show_photo')
                        if len(picture) > 1:
                            bot.send_photo(message.chat.id, picture, announcement[0], parse_mode='Markdown',
                                           reply_markup=markup)
                            bot.register_next_step_handler(message, master_additional_actions)
                        elif len(picture) == 1:
                            bot.send_message(message.chat.id, announcement[0], parse_mode='Markdown',
                                             reply_markup=markup)
                            bot.register_next_step_handler(message, master_additional_actions)

                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                answer = get_data_for_master(username, 'show_games_one_master')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for i in range(len(answer)):
                    btn = types.KeyboardButton(answer[i])
                    markup.add(btn)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                                       '–Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, show_master_schedule)

        except ConvertionException as e:
            answer = get_data_for_master(username, 'show_games_one_master')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for i in range(len(answer)):
                btn = types.KeyboardButton(answer[i])
                markup.add(btn)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, show_master_schedule)


def edit_master_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        games = get_data_for_master(username, 'show_games_one_master')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    if message.text in games:
                        position = games.index(message.text)
                        copy_game(position, username)
                        announcement = announce_game(username, 'show')
                        picture = get_data_for_master(username, 'show_photo')
                        result = master_schedule_elements(username)
                        if picture != '-':
                            bot.send_photo(message.chat.id, picture, announcement[0], parse_mode='Markdown')
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å :)'.format(message.from_user),
                                             reply_markup=result, )
                            bot.register_next_step_handler(message, master_schedule)
                        elif picture == '-':
                            bot.send_message(message.chat.id, announcement[0], parse_mode='Markdown')
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å :)\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '
                                                  '–∫–∞–∫–æ–π-—Ç–æ –ø—É–Ω–∫—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ "-" :)'
                                             .format(message.from_user), reply_markup=result, )
                            bot.register_next_step_handler(message, master_schedule)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                answer = get_data_for_master(username, 'show_games_one_master')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for i in range(len(answer)):
                    btn = types.KeyboardButton(answer[i])
                    markup.add(btn)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ'
                                                       ' –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, edit_master_schedule)
        except ConvertionException as e:
            answer = get_data_for_master(username, 'show_games_one_master')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for i in range(len(answer)):
                btn = types.KeyboardButton(answer[i])
                markup.add(btn)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, edit_master_schedule)


def master_additional_actions(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        check_games_master(username)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu(message)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É':
                        result = master_schedule_elements(username)
                        bot.send_message(message.chat.id,
                                         text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å :)\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ '
                                              '–ø—É–Ω–∫—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ "-" :)'.format(message.from_user),
                                         reply_markup=result, )
                        bot.register_next_step_handler(message, master_schedule)
                    elif message.text == '–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É üî•':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                           is_persistent=False)
                        announcement = announce_game(username, 'announce')
                        chats = get_chats('get_name', '')
                        if len(chats) == 0:
                            result = main_menu_master(message)
                            bot.send_message(message.chat.id, text=f'{user_name}, –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å –∏–≥—Ä–∞–º–∏, '
                                                                   f'–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∏–≥—Ä—É :(')
                            bot.send_message(message.chat.id,
                                             text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.format(
                                                 message.from_user),
                                             reply_markup=result, )
                            bot.register_next_step_handler(message, master_actions)
                        else:
                            picture = get_data_for_master(username, 'show_photo')
                            if picture != '-':
                                bot.send_photo(message.chat.id, picture, announcement[0], parse_mode='Markdown')
                                for chat in chats:
                                    markup.add(chat)
                                markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã üî•üî•üî•'),
                                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                bot.send_message(message.chat.id,
                                                 text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É '
                                                      f'–∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)', reply_markup=markup)
                                bot.register_next_step_handler(message, send_announcement)
                            elif picture == '-':
                                bot.send_message(message.chat.id, announcement[0], parse_mode='Markdown')
                                for chat in chats:
                                    markup.add(chat)
                                markup.add(types.KeyboardButton('üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã üî•üî•üî•'),
                                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                                bot.send_message(message.chat.id,
                                                 text=f'{user_name}, –≤–∞—à –∞–Ω–æ–Ω—Å –≥–æ—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É '
                                                      f'–∑–∞–ø–æ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ :)', reply_markup=markup)
                                bot.register_next_step_handler(message, send_announcement)
                    else:
                        raise MyCustomException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n'
                                                '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
                markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                           types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ '
                                                       '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, master_additional_actions)
        except MyCustomException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
            markup.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                       types.KeyboardButton('–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É'),
                       types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, master_additional_actions)


def send_announcement(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        check_games_master(username)
        user_name = message.from_user.first_name
        chats = get_chats('get_name', '')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    delete_announce_game(username)
                    start(message)
                elif message.text == '/help_me':
                    delete_announce_game(username)
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    delete_announce_game(username)
                    roll_the_dice(message)
                elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    delete_announce_game(username)
                    back_to_main_menu(message)
                    bot.register_next_step_handler(message, master_actions)
                else:
                    if message.text == '–î–∞! –í—ã–ª–æ–∂–∏—Ç—å –µ—â—ë —Ä–∞–∑ :)':
                        picture = get_data_for_master(username, 'show_photo')
                        group = groups[-1]
                        id_group = get_chats('get_id', group)
                        result = get_announce_game(username, group, id_group, 'replay')
                        if picture != '-':
                            bot.send_photo(id_group, picture, result, parse_mode='Markdown')
                            back_main_menu = main_menu_master(message)
                            text = (f'üî•üî•üî•  –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî• \n'
                                    f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–æ–Ω—Å '
                                    f'—Å–Ω–æ–≤–∞ :)')
                            bot.send_message(message.chat.id, text=text, reply_markup=back_main_menu)
                            bot.register_next_step_handler(message, master_actions)
                        elif picture == '-':
                            bot.send_message(id_group, result, parse_mode='Markdown')
                            back_main_menu = main_menu_master(message)
                            text = (f'üî•üî•üî•  –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî• \n'
                                    f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–æ–Ω—Å '
                                    f'—Å–Ω–æ–≤–∞ :)')
                            bot.send_message(message.chat.id, text=text, reply_markup=back_main_menu)
                            bot.register_next_step_handler(message, master_actions)

                    elif message.text == '–ù–µ—Ç, –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å :)':
                        btn_back = main_menu_master(message)
                        bot.send_message(message.chat.id,
                                         text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=btn_back)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text in chats:
                        group = message.text
                        groups.append(group)
                        id_group = get_chats('get_id', group)
                        result = get_announce_game(username, group, id_group, '-')
                        if result == '–í—ã —É–∂–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–ª–∏ —Å–≤–æ–π –∞–Ω–æ–Ω—Å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ :)\n–í—ã–ª–æ–∂–∏—Ç—å –µ—â—ë —Ä–∞–∑?':
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                               is_persistent=False)
                            markup.add(types.KeyboardButton('–î–∞! –í—ã–ª–æ–∂–∏—Ç—å –µ—â—ë —Ä–∞–∑ :)'),
                                       types.KeyboardButton('–ù–µ—Ç, –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å :)'))
                            bot.send_message(message.chat.id, text=result, reply_markup=markup)
                            bot.register_next_step_handler(message, send_announcement)
                        else:
                            picture = get_data_for_master(username, 'show_photo')
                            if picture != '-':
                                bot.send_photo(id_group, picture, result, parse_mode='Markdown')
                                back_main_menu = main_menu_master(message)
                                text = (f'üî•üî•üî• –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî•\n'
                                        f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–æ–Ω—Å '
                                        f'—Å–Ω–æ–≤–∞ :)')
                                bot.send_message(message.chat.id, text=text, reply_markup=back_main_menu)
                                bot.register_next_step_handler(message, master_actions)
                            elif picture == '-':
                                bot.send_message(id_group, result, parse_mode='Markdown')
                                back_main_menu = main_menu_master(message)
                                text = (f'üî•üî•üî• –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî•\n'
                                        f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–æ–Ω—Å '
                                        f'—Å–Ω–æ–≤–∞ :)')
                                bot.send_message(message.chat.id, text=text, reply_markup=back_main_menu)
                                bot.register_next_step_handler(message, master_actions)
                    elif message.text == 'üî•üî•üî• –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã üî•üî•üî•':
                        for group in chats:
                            picture = get_data_for_master(username, 'show_photo')
                            id_group = get_chats('get_id', group)
                            result = get_announce_game(username, group, id_group, 'replay')
                            if picture != '-':
                                bot.send_photo(id_group, picture, result, parse_mode='Markdown')
                                text = f'üî•üî•üî• –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî•'
                                bot.send_message(message.chat.id, text)
                                announce_game(username, 'announce')
                            elif picture == '-':
                                bot.send_message(id_group, result, parse_mode='Markdown')
                                text = f'üî•üî•üî• –í—ã –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–µ <{group}> üî•üî•üî•'
                                bot.send_message(message.chat.id, text)
                                announce_game(username, 'announce')
                        back_main_menu = main_menu_master(message)
                        bot.send_message(message.chat.id, '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º :)',
                                         reply_markup=back_main_menu)
                        bot.register_next_step_handler(message, master_actions)

                    else:
                        raise MyCustomException('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É'
                                                '–¥–ª—è –∞–Ω–æ–Ω—Å–∞ :)\n‚Äî\n'
                                                '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
                for chat in chats:
                    markup.add(chat)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ '
                                                       '–Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞ :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ '
                                                       '—Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, send_announcement)
        except MyCustomException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
            for chat in chats:
                markup.add(chat)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, send_announcement)


def delete_game_master(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        main_menu = main_menu_master(message)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–î–ê':
                        delete_game(username, 'master')
                        bot.send_message(message.chat.id, text='–í—ã —É–¥–∞–ª–∏–ª–∏ –∏–≥—Ä—É!')
                        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=main_menu)
                        bot.register_next_step_handler(message, master_actions)
                    elif message.text == '–ù–ï–¢':
                        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)', reply_markup=main_menu)
                        bot.register_next_step_handler(message, master_actions)
                    else:
                        raise MyCustomException('–†–µ—à–∏—Ç–µ: –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –Ω–µ—Ç :)\n‚Äî\n'
                                                '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton('–î–ê'), types.KeyboardButton('–ù–ï–¢'))
                bot.send_message(message.chat.id, text='–†–µ—à–∏—Ç–µ: –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –Ω–µ—Ç :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                                       '–Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, delete_game_master)

        except MyCustomException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–î–ê'), types.KeyboardButton('–ù–ï–¢'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, delete_game_master)


def player_actions(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        check_games_player(username)
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        main_menu = main_menu_player(message)
                        bot.send_message(message.chat.id, text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                        games = get_data_for_player(username, 'show_games')
                        btn_menu_player = btn_back_to_main_menu_player(message)
                        if len(games) == 0:
                            bot.send_message(message.chat.id,
                                             text='–ú–∞—Å—Ç–µ—Ä–∞ –µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüòî\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ '
                                                  '–ø–æ–∑–∂–µ üëÄ', reply_markup=btn_menu_player)
                            bot.register_next_step_handler(message, player_actions)
                        else:
                            add_player(username, 'default')
                            for game in games:
                                markup.add(types.KeyboardButton(game))
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id, text="{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ"
                                                                   " –∑–∞–ø–∏—Å–∞—Ç—å—Å—è :)".format(message.from_user),
                                             reply_markup=markup)
                            bot.register_next_step_handler(message, player_schedule)

                    elif message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã':
                        games = get_data_for_player(username, 'show_games_one_player')
                        if games == '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É :)':
                            main_menu = main_menu_player(message)
                            bot.send_message(message.chat.id, text=games, reply_markup=main_menu)
                            bot.register_next_step_handler(message, player_actions)
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                            for i in range(len(games)):
                                btn = types.KeyboardButton('üé≤ ' + games[i] + ' üé≤')
                                markup.add(btn)
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è :)',
                                             reply_markup=markup)
                            bot.register_next_step_handler(message, delete_game_player)

                    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—ã':
                        games = get_data_for_player(username, 'show_games_one_player')
                        if games == '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É :)':
                            main_menu = main_menu_player(message)
                            bot.send_message(message.chat.id, text=games, reply_markup=main_menu)
                            bot.register_next_step_handler(message, player_actions)
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                            for i in range(len(games)):
                                btn = types.KeyboardButton('üé≤ ' + games[i] + ' üé≤')
                                markup.add(btn)
                            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            bot.send_message(message.chat.id,
                                             text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :)',
                                             reply_markup=markup)
                            bot.register_next_step_handler(message, show_game_player)
                    elif message.text == '–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å—Å—è, –Ω–∞–¥–æ–µ–ª–æ –≤—Å—ë —É–∂–µ üòê':
                        delete_player(username)
                        bot.send_message(message.chat.id, text='{0.first_name}, –≤—ã —É–¥–∞–ª–∏–ª–∏—Å—å –∏–∑ –±–æ—Ç–∞ :)'
                                         .format(message.from_user))
                    elif message.text == '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª! –Ø –æ—Å—Ç–∞—é—Å—å üòâ':
                        check_games_player(username)
                        main_menu = main_menu_player(message)
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == '–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                        markup.add(types.KeyboardButton('–î–∞, —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å—Å—è, –Ω–∞–¥–æ–µ–ª–æ –≤—Å—ë —É–∂–µ üòê'),
                                   types.KeyboardButton('–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª! –Ø –æ—Å—Ç–∞—é—Å—å üòâ'))
                        bot.send_message(message.chat.id,
                                         text='{0.first_name}, –≤—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞?\n–¢–æ–≥–¥–∞ –≤—Å–µ –≤–∞—à–∏ '
                                              '–∑–∞–ø–∏—Å–∏ —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç—Å—è :('.format(message.from_user), reply_markup=markup)
                        bot.register_next_step_handler(message, player_actions)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                result = main_menu_player(message)
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ :)\n‚Äî\n–ò–ª–∏ '
                                                       '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)',
                                 reply_markup=result)
                bot.register_next_step_handler(message, player_actions)

        except ConvertionException as e:
            result = main_menu_player(message)
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=result)
            bot.register_next_step_handler(message, player_actions)


def player_schedule(message):
    if message.chat.type == 'private':
        username = message.from_user.username
        user_name = message.from_user.first_name
        games = get_data_for_player(username, 'show_games')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    back_to_main_menu_player(message)
                    bot.register_next_step_handler(message, player_actions)
                else:
                    if message.text in games:
                        indexes = []
                        for i in range(len(message.text)):
                            if message.text[i] == '"':
                                indexes.append(i)
                        first = indexes[0] + 1
                        game = message.text[first:indexes[1]]
                        copy_game_for_player(game)
                        answer = get_data_for_player(game, 'show_concrete_game')
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                           is_persistent=False)
                        markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

                        if type(answer) is list:
                            photo = answer[0]
                            text = answer[1]
                            # new_text = ''
                            # for word in text:
                            #     if word == '–ú–∞—Å—Ç–µ—Ä':
                            #         new_text += f'*{word}*\n@{text.get(word)}\n\n'
                            #     else:
                            #         new_text += f'*{word}*\n{text.get(word)}\n\n'

                            # bot.send_photo(message.chat.id, photo, text, reply_markup=markup)
                            bot.send_photo(message.chat.id, photo, text, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, make_appointment)
                        else:
                            print(answer)
                            # text = ''
                            # for word in answer:
                            #     if word == '–ú–∞—Å—Ç–µ—Ä':
                            #         text += f'*{word}*\n@{answer.get(word)}\n\n'
                            #     else:
                            #         text += f'*{word}*\n{answer.get(word)}\n\n'

                            bot.send_message(message.chat.id, answer, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, make_appointment)

                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for game in games:
                    markup.add(types.KeyboardButton(game))
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                                       '–Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, player_schedule)

        except ConvertionException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for game in games:
                markup.add(types.KeyboardButton(game))
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, player_schedule)


def make_appointment(message):
    if message.chat.type == 'private':
        if message.text[0] == 'üé≤':
            message.text = message.text[2:-2]
        username = message.from_user.username
        user_name = message.from_user.first_name
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu_player(message)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É':
                        answer = get_data_for_player(username, 'show_last_game_for_player')
                        if type(answer) is list:
                            game = answer[1].get('–ù–∞–∑–≤–∞–Ω–∏–µ')
                            result = check_free_places(username, game)

                            if result == '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É :)':
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id, text=result, reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)
                            elif result == 0:
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id,
                                                 text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç :(',
                                                 reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)
                            elif result == '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É':
                                notification = notify_master(username, game)
                                master, text = notification.get('master'), notification.get('text')
                                bot.send_message(master, text=text)
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id,
                                                 text='–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!',
                                                 reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)
                        else:
                            game = get_data_for_player(username, 'show_last_game_for_player')
                            game = game.get('–ù–∞–∑–≤–∞–Ω–∏–µ')
                            result = check_free_places(username, game)
                            if result == '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É :)':
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id, text=result, reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)
                            elif result == 0:
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id,
                                                 text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç :(',
                                                 reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)
                            elif result == '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É':
                                notification = notify_master(username, game)
                                master, text = notification.get('master'), notification.get('text')
                                bot.send_message(master, text=text)
                                main_menu = main_menu_player(message)
                                bot.send_message(message.chat.id,
                                                 text='–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!',
                                                 reply_markup=main_menu)
                                bot.register_next_step_handler(message, player_actions)

                    else:
                        raise ConvertionException('–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)\n‚Äî\n'
                                                  '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                answer = get_data_for_player(username, 'show_last_game_for_player')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
                markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                text = ''
                for word in answer:
                    if word == '–ú–∞—Å—Ç–µ—Ä':
                        text += f'*{word}*\n@{answer.get(word)}\n\n'
                    else:
                        text += f'*{word}*\n{answer.get(word)}\n\n'

                bot.send_message(message.chat.id, text='–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)\n‚Äî\n–ò–ª–∏ '
                                                       '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
                bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
                bot.register_next_step_handler(message, make_appointment)

        except ConvertionException as e:
            answer = get_data_for_player(username, 'show_last_game_for_player')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
            markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'),
                       types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            text = ''
            for word in answer:
                if word == '–ú–∞—Å—Ç–µ—Ä':
                    text += f'*{word}*\n@{answer.get(word)}\n\n'
                else:
                    text += f'*{word}*\n{answer.get(word)}\n\n'

            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}')
            bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
            bot.register_next_step_handler(message, make_appointment)


def delete_game_player(message):
    if message.chat.type == 'private':
        if message.text[0] == 'üé≤':
            message.text = message.text[2:-2]
        username = message.from_user.username
        user_name = message.from_user.first_name
        games = get_data_for_player(username, 'show_games')
        games = games[0]

        indexes = []
        for i in range(len(games)):
            if games[i] == '"':
                indexes.append(i)

        beginning = indexes[0]
        end = indexes[1]
        game = games[beginning + 1:end]

        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã':
                        unsubscribe(username)
                        main_menu = main_menu_player(message)
                        bot.send_message(message.chat.id, text='–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–π –∏–≥—Ä–µ :)',
                                         reply_markup=main_menu)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        back_to_main_menu_player(message)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text == game:
                        copy_game_for_player(message.text)
                        answer = get_data_for_player(username, 'show_last_game_for_player')
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                           is_persistent=False)
                        markup.add(types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

                        if len(answer) == 2:
                            photo = answer[0]
                            text = answer[1]
                            new_text = ''
                            for word in text:
                                if word == '–ú–∞—Å—Ç–µ—Ä':
                                    new_text += f'*{word}*\n@{text.get(word)}\n\n'
                                else:
                                    new_text += f'*{word}*\n{text.get(word)}\n\n'
                            bot.send_photo(message.chat.id, photo, new_text, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, delete_game_player)
                        else:
                            text = ''
                            for word in answer:
                                if word == '–ú–∞—Å—Ç–µ—Ä':
                                    text += f'*{word}*\n@{answer.get(word)}\n\n'
                                else:
                                    text += f'*{word}*\n{answer.get(word)}\n\n'
                            bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, delete_game_player)

                    else:
                        raise ConvertionException('–û—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)\n‚Äî\n'
                                                  '\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')

            else:
                answer = get_data_for_player(username, 'show_last_'
                                                       'game_for_player')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
                markup.add(types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã'),
                           types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                text = ''
                for word in answer:
                    if word == '–ú–∞—Å—Ç–µ—Ä':
                        text += f'*{word}*\n@{answer.get(word)}\n\n'
                    else:
                        text += f'*{word}*\n{answer.get(word)}\n\n'
                bot.send_message(message.chat.id, text='–û—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)'
                                                       '\n‚Äî\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
                bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
                bot.register_next_step_handler(message, delete_game_player)

        except ConvertionException as e:
            answer = get_data_for_player(username, 'show_last_game_for_player')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, is_persistent=False)
            markup.add(types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã'),
                       types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            text = ''
            for word in answer:
                if word == '–ú–∞—Å—Ç–µ—Ä':
                    text += f'*{word}*\n@{answer.get(word)}\n\n'
                else:
                    text += f'*{word}*\n{answer.get(word)}\n\n'
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}')
            bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
            bot.register_next_step_handler(message, delete_game_player)


def show_game_player(message):
    if message.chat.type == 'private':
        if message.text[0] == 'üé≤':
            message.text = message.text[2:-2]
        username = message.from_user.username
        user_name = message.from_user.first_name
        games = get_data_for_player(username, 'show_games_one_player')
        try:
            if type(message.text) is str:
                if message.text == '/start':
                    start(message)
                elif message.text == '/help_me':
                    help_me(message)
                elif message.text == '/roll_the_dice':
                    roll_the_dice(message)
                else:
                    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                        main_menu = main_menu_player(message)
                        bot.send_message(message.chat.id, text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å :)'.
                                         format(message.from_user), reply_markup=main_menu)
                        bot.register_next_step_handler(message, player_actions)
                    elif message.text in games:
                        copy_game_for_player(message.text)
                        answer = get_data_for_player(username, 'show_last_game_for_player')
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True,
                                                           is_persistent=False)
                        markup.add(types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–≥—Ä—ã'),
                                   types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        if len(answer) == 2:
                            photo = answer[0]
                            text = answer[1]
                            new_text = ''
                            for word in text:
                                if word == '–ú–∞—Å—Ç–µ—Ä':
                                    new_text += f'*{word}*\n@{text.get(word)}\n\n'
                                else:
                                    new_text += f'*{word}*\n{text.get(word)}\n\n'
                            bot.send_photo(message.chat.id, photo, new_text, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, delete_game_player)
                        else:
                            text = ''
                            for word in answer:
                                if word == '–ú–∞—Å—Ç–µ—Ä':
                                    text += f'*{word}*\n@{answer.get(word)}\n\n'
                                else:
                                    text += f'*{word}*\n{answer.get(word)}\n\n'
                            bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
                            bot.register_next_step_handler(message, delete_game_player)
                    else:
                        raise ConvertionException('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ '
                                                  '–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ '
                                                  '—Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)')
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for i in range(len(games)):
                    btn = types.KeyboardButton('üé≤ ' + games[i] + ' üé≤')
                    markup.add(btn)
                markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ '
                                                       '–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :)\n‚Äî\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É '
                                                       '–≤ —Å–∏–Ω–µ–π –ø–ª–∞—à–∫–µ –º–µ–Ω—é :)', reply_markup=markup)
                bot.register_next_step_handler(message, show_game_player)

        except ConvertionException as e:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for i in range(len(games)):
                btn = types.KeyboardButton('üé≤ ' + games[i] + ' üé≤')
                markup.add(btn)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, f'{user_name}, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üôÉ\n{e}', reply_markup=markup)
            bot.register_next_step_handler(message, show_game_player)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)